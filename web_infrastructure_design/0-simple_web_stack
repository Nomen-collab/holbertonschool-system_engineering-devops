# 0. Simple web stack

## Diagram Screenshot Link

https://imgur.com/6Ums4XQ

---

## Design and Explanation

### Infrastructure Overview

The infrastructure consists of a **single server** hosting all necessary components to serve the website `www.foobar.com`.

**Components included in the single server:**
* **1 Web Server** (Nginx)
* **1 Application Server**
* **1 Application Files** (Codebase)
* **1 Database** (MySQL)

**User Access Flow:**
1.  The **User** sends a request for `www.foobar.com`.
2.  The **DNS** resolves the domain name to the server's IP address (`8.8.8.8`).
3.  The request is sent to the server and received by the **Nginx Web Server**.
4.  Nginx forwards the request for dynamic content to the **Application Server**.
5.  The Application Server executes the **Application Files** and communicates with the **MySQL Database** if data is needed.
6.  The Application Server sends the generated content back to Nginx.
7.  Nginx sends the final HTML response back to the User's browser.

---

### Specifics about this Infrastructure

| Concept | Explanation |
| :--- | :--- |
| **What is a server** | A server is a physical or virtual machine that provides services, resources, or data to other computers (clients) over a network. |
| **Role of the domain name** | It provides a human-readable address for a website, which the DNS translates into a numerical IP address for communication. |
| **Type of DNS record www is in www.foobar.com** | The `www` is typically configured as an **A record** (points directly to the server IP) or a **CNAME record** (points to another domain name). Given the requirements, we assume an **A record** points to `8.8.8.8`. |
| **Role of the web server** | The **Web Server (Nginx)** handles incoming HTTP/HTTPS requests. It serves static files (HTML, CSS) and acts as a **reverse proxy** to pass dynamic requests to the application server. |
| **Role of the application server** | It executes the application's business logic, interacts with the database, and generates dynamic content, which is sent back to the web server. |
| **Role of the database** | The **Database (MySQL)** stores, organizes, and manages persistent data (e.g., user information, application content). |
| **Communication protocol** | The server uses the **TCP/IP protocol suite**, specifically **HTTP/HTTPS** over **TCP** (ports 80/443), to communicate with the user's computer. |

---

### Issues with this Infrastructure

1.  **SPOF (Single Point Of Failure):** If any single component on the server (Nginx, Application Server, or MySQL) fails, or if the server itself fails, the entire website becomes **unavailable**.
2.  **Downtime when maintenance needed:** Deploying new code, patching the operating system, or performing any maintenance requires restarting services, leading to **downtime** for users since there is no backup server to handle traffic.
3.  **Cannot scale if too much incoming traffic:** All resource load (CPU, RAM, network) is concentrated on this single machine. High traffic volumes will quickly **overload the server**, resulting in severe slowdowns or crashes.
